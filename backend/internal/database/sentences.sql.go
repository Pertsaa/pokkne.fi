// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: sentences.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const batchGetSentencesByIds = `-- name: BatchGetSentencesByIds :many
SELECT id, created_at, content FROM sentence WHERE id = ANY($1::int[])
`

func (q *Queries) BatchGetSentencesByIds(ctx context.Context, id []int32) ([]Sentence, error) {
	rows, err := q.db.Query(ctx, batchGetSentencesByIds, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sentence
	for rows.Next() {
		var i Sentence
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createSentence = `-- name: CreateSentence :one
INSERT INTO sentence (content) VALUES ($1) RETURNING id, created_at, content
`

func (q *Queries) CreateSentence(ctx context.Context, content string) (Sentence, error) {
	row := q.db.QueryRow(ctx, createSentence, content)
	var i Sentence
	err := row.Scan(&i.ID, &i.CreatedAt, &i.Content)
	return i, err
}

const listScoredSentences = `-- name: ListScoredSentences :many
SELECT id, created_at, content, similarity(content, $1) AS sml
  FROM sentence
  WHERE content % $1
  ORDER BY sml DESC, content
`

type ListScoredSentencesRow struct {
	ID        int32              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
	Content   string             `json:"content"`
	Sml       float32            `json:"sml"`
}

func (q *Queries) ListScoredSentences(ctx context.Context, prompt string) ([]ListScoredSentencesRow, error) {
	rows, err := q.db.Query(ctx, listScoredSentences, prompt)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListScoredSentencesRow
	for rows.Next() {
		var i ListScoredSentencesRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Content,
			&i.Sml,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSentences = `-- name: ListSentences :many
SELECT id, created_at, content FROM sentence ORDER BY created_at
`

func (q *Queries) ListSentences(ctx context.Context) ([]Sentence, error) {
	rows, err := q.db.Query(ctx, listSentences)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sentence
	for rows.Next() {
		var i Sentence
		if err := rows.Scan(&i.ID, &i.CreatedAt, &i.Content); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
